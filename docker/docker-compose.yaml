
services:
  # Milvus vector database
  milvus:
    image: milvusdb/milvus:v2.5.0-beta
    container_name: askme-milvus
    command: ["milvus", "run", "standalone"]
    ports:
      - "19530:19530"  # gRPC port
      - "9091:9091"    # HTTP port
    volumes:
      - milvus-data:/var/lib/milvus
      - ./milvus.yaml:/milvus/configs/milvus.yaml
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    depends_on:
      - etcd
      - minio
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # etcd for Milvus metadata
  etcd:
    image: quay.io/coreos/etcd:v3.5.5
    container_name: askme-etcd
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - etcd-data:/etcd
    command: etcd -advertise-client-urls=http://127.0.0.1:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 10s
      retries: 5

  # MinIO for Milvus object storage
  minio:
    image: minio/minio:RELEASE.2023-03-20T20-16-18Z
    container_name: askme-minio
    environment:
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    volumes:
      - minio-data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5

  # askme API service
  askme-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: askme-api
    ports:
      - "8080:8080"
    environment:
      - ASKME_VECTOR_BACKEND=milvus
      - ASKME_MILVUS_HOST=milvus
      - ASKME_MILVUS_PORT=19530
      - ASKME_LOG_LEVEL=INFO
      - ASKME_ENABLE_COHERE=${ASKME_ENABLE_COHERE:-0}
      - COHERE_API_KEY=${COHERE_API_KEY:-}
    volumes:
      - ./configs:/app/configs
      - askme-data:/app/data
      - askme-logs:/app/logs
      - model-cache:/app/models  # Cache for downloaded models
    depends_on:
      milvus:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  # Optional: Weaviate (alternative vector DB)
  weaviate:
    image: cr.weaviate.io/semitechnologies/weaviate:1.24.1
    container_name: askme-weaviate
    profiles: ["weaviate"]  # Only start with --profile weaviate
    ports:
      - "8081:8080"   # HTTP
      - "8082:50051"  # gRPC
    environment:
      - QUERY_DEFAULTS_LIMIT=25
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=none
      - ENABLE_MODULES=backup-filesystem,text2vec-openai,text2vec-cohere,text2vec-huggingface,ref2vec-centroid,generative-openai,qna-openai
      - CLUSTER_HOSTNAME=node1
    volumes:
      - weaviate-data:/var/lib/weaviate

  # Optional: Qdrant (alternative vector DB)
  qdrant:
    image: qdrant/qdrant:v1.10.1
    container_name: askme-qdrant
    profiles: ["qdrant"]  # Only start with --profile qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: askme-prometheus
    profiles: ["monitoring"]
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'

  # Optional: Grafana for monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: askme-grafana
    profiles: ["monitoring"]
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin

volumes:
  milvus-data:
    driver: local
  etcd-data:
    driver: local
  minio-data:
    driver: local
  askme-data:
    driver: local
  askme-logs:
    driver: local
  model-cache:
    driver: local
  weaviate-data:
    driver: local
  qdrant-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  default:
    name: askme-network
